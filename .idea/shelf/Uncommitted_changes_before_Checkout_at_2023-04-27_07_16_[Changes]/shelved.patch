Index: templates/base.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ\" crossorigin=\"anonymous\">\n  </head>\n  <body>\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <a class=\"navbar-brand\" href=\"/\">Home</a>\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"False\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"navbarText\">\n    <ul class=\"navbar-nav mr-auto\">\n      {% if user.is_authenticated %}\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/logout\">Logout</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"#\">Welcome, {{user.username}}</a>\n      </li>\n      {% else %}\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/login\">Login</a>\n      </li>\n      {% endif %}\n    </ul>\n  </div>\n</nav>\n\n    {% include 'messages.html' %}\n\n{%block content%}  {%endblock%}\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe\" crossorigin=\"anonymous\"></script>\n  </body>\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/base.html b/templates/base.html
--- a/templates/base.html	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/templates/base.html	(date 1682531931835)
@@ -11,6 +11,7 @@
   <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="False" aria-label="Toggle navigation">
     <span class="navbar-toggler-icon"></span>
   </button>
+      <a href="{% url 'profile' %}" title="Update my profile">Hi {{request.user | title}}</a>
   <div class="collapse navbar-collapse" id="navbarText">
     <ul class="navbar-nav mr-auto">
       {% if user.is_authenticated %}
Index: eShop/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for eShop project.\n\nGenerated by 'django-admin startproject' using Django 4.2.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.2/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\nfrom django.contrib.messages import constants as messages\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-v*4r(9t70spj1r7cik=rl7on48!pzlt4br*a(739up$l27an*5'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'service.apps.ServiceConfig',\n    'user.apps.UserConfig',\n    'store.apps.StoreConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'crispy_forms',\n    'crispy_bootstrap4',\n]\n\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\n\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'eShop.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'store'), os.path.join(BASE_DIR, 'user'), os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'eShop.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n\nMESSAGE_TAGS = {\n        messages.DEBUG: 'alert-secondary',\n        messages.INFO: 'alert-info',\n        messages.SUCCESS: 'alert-success',\n        messages.WARNING: 'alert-warning',\n        messages.ERROR: 'alert-danger',\n }\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/eShop/settings.py b/eShop/settings.py
--- a/eShop/settings.py	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/eShop/settings.py	(date 1682534018315)
@@ -17,7 +17,6 @@
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
 BASE_DIR = Path(__file__).resolve().parent.parent
 
-
 # Quick-start development settings - unsuitable for production
 # See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
 
@@ -29,12 +28,11 @@
 
 ALLOWED_HOSTS = []
 
-
 # Application definition
 
 INSTALLED_APPS = [
-    'service.apps.ServiceConfig',
     'user.apps.UserConfig',
+    'service.apps.ServiceConfig',
     'store.apps.StoreConfig',
     'django.contrib.admin',
     'django.contrib.auth',
@@ -79,7 +77,6 @@
 
 WSGI_APPLICATION = 'eShop.wsgi.application'
 
-
 # Database
 # https://docs.djangoproject.com/en/4.2/ref/settings/#databases
 
@@ -90,7 +87,6 @@
     }
 }
 
-
 # Password validation
 # https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
 
@@ -109,7 +105,6 @@
     },
 ]
 
-
 # Internationalization
 # https://docs.djangoproject.com/en/4.2/topics/i18n/
 
@@ -121,7 +116,6 @@
 
 USE_TZ = True
 
-
 # Static files (CSS, JavaScript, Images)
 # https://docs.djangoproject.com/en/4.2/howto/static-files/
 
@@ -130,12 +124,12 @@
 EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
 
 MESSAGE_TAGS = {
-        messages.DEBUG: 'alert-secondary',
-        messages.INFO: 'alert-info',
-        messages.SUCCESS: 'alert-success',
-        messages.WARNING: 'alert-warning',
-        messages.ERROR: 'alert-danger',
- }
+    messages.DEBUG: 'alert-secondary',
+    messages.INFO: 'alert-info',
+    messages.SUCCESS: 'alert-success',
+    messages.WARNING: 'alert-warning',
+    messages.ERROR: 'alert-danger',
+}
 
 # Default primary key field type
 # https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
@@ -145,4 +139,3 @@
 MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
 MEDIA_URL = '/media/'
 
-
Index: user/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\nfrom user.models import BodyMeasurements\n\n\nclass RegisterForm(UserCreationForm):\n    email = forms.EmailField()\n\n    class Meta:\n        model = User\n        fields = [\"username\", \"email\", \"password1\", \"password2\"]\n\n\nclass BodyMeasurementsForm(forms.ModelForm):\n    class Meta:\n        model = BodyMeasurements\n        exclude = ('last_updated',)\n\n\n# class PasswordResetForm(UserCreationForm):\n#     class Meta:\n#         model = User\n#         fields = ['email']\n#
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/forms.py b/user/forms.py
--- a/user/forms.py	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/user/forms.py	(date 1682538894746)
@@ -2,7 +2,28 @@
 from django.contrib.auth.forms import UserCreationForm
 from django.contrib.auth.models import User
 from user.models import BodyMeasurements
+from .models import Profile
+
 
+class UpdateUserForm(forms.ModelForm):
+    username = forms.CharField(max_length=100,
+                               required=True,
+                               widget=forms.TextInput(attrs={'class': 'form-control'}))
+    email = forms.EmailField(required=True,
+                             widget=forms.TextInput(attrs={'class': 'form-control'}))
+
+    class Meta:
+        model = User
+        fields = ['username', 'email']
+
+
+class UpdateProfileForm(forms.ModelForm):
+    avatar = forms.ImageField(widget=forms.FileInput(attrs={'class': 'form-control-file'}))
+    bio = forms.CharField(widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 5}))
+
+    class Meta:
+        model = Profile
+        fields = ['avatar']
 
 class RegisterForm(UserCreationForm):
     email = forms.EmailField()
Index: user/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate, logout\nfrom django.contrib import messages\nfrom django.contrib.auth.forms import AuthenticationForm\nfrom .forms import RegisterForm\nfrom django.contrib.auth.decorators import login_required\n\n\ndef register(response):\n    if response.method == \"POST\":\n        form = RegisterForm(response.POST)\n        if form.is_valid():\n            form.save()\n        return redirect(\"/home\")\n    else:\n        form = RegisterForm()\n    return render(response, \"users/register.html\", {\"form\": form})\n\n\ndef login_request(request):\n    if request.method == \"POST\":\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                messages.info(request, f\"You are now logged in as {username}.\")\n                return redirect(\"/\")\n            else:\n                messages.error(request, \"Invalid username or password.\")\n        else:\n            messages.error(request, \"Invalid username or password.\")\n    form = AuthenticationForm()\n    return render(request=request, template_name=\"users/login.html\", context={\"login_form\": form})\n\n\ndef logout_request(request):\n    logout(request)\n    messages.success(request, \"You have successfully logged out.\")\n    return redirect(\"/\")\n\n\n@login_required\ndef profile(request):\n    return render(request, 'users/profile.html')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/views.py b/user/views.py
--- a/user/views.py	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/user/views.py	(date 1682534979689)
@@ -2,7 +2,7 @@
 from django.contrib.auth import login, authenticate, logout
 from django.contrib import messages
 from django.contrib.auth.forms import AuthenticationForm
-from .forms import RegisterForm
+from .forms import RegisterForm, UpdateUserForm, UpdateProfileForm
 from django.contrib.auth.decorators import login_required
 
 
@@ -11,7 +11,7 @@
         form = RegisterForm(response.POST)
         if form.is_valid():
             form.save()
-        return redirect("/home")
+        return render(response, "users/profile.html")
     else:
         form = RegisterForm()
     return render(response, "users/register.html", {"form": form})
@@ -41,7 +41,19 @@
     messages.success(request, "You have successfully logged out.")
     return redirect("/")
 
-
 @login_required
 def profile(request):
-    return render(request, 'users/profile.html')
\ No newline at end of file
+    if request.method == 'POST':
+        user_form = UpdateUserForm(request.POST, instance=request.user)
+        profile_form = UpdateProfileForm(request.POST, request.FILES, instance=request.user.profile)
+
+        if user_form.is_valid() and profile_form.is_valid():
+            user_form.save()
+            profile_form.save()
+            messages.success(request, 'Your profile is updated successfully')
+            return redirect(to='profile')
+    else:
+        user_form = UpdateUserForm(instance=request.user)
+        profile_form = UpdateProfileForm(instance=request.user.profile)
+
+    return render(request, 'users/profile.html', {'user_form': user_form, 'profile_form': profile_form})
\ No newline at end of file
Index: user/templates/users/register.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\n\n{% block title %}Create an Account{% endblock %}\n{% load crispy_forms_tags %}\n\n{% block content %}\n    <form method=\"POST\" class=\"form-group\">\n\t{{ form|crispy }}\n\t{% csrf_token %}\n\t<button type=\"submit\" class=\"btn btn-success\">Register</button>\n    </form>\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/templates/users/register.html b/user/templates/users/register.html
--- a/user/templates/users/register.html	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/user/templates/users/register.html	(date 1682526630141)
@@ -7,6 +7,6 @@
     <form method="POST" class="form-group">
 	{{ form|crispy }}
 	{% csrf_token %}
-	<button type="submit" class="btn btn-success">Register</button>
+	<button  type="submit" class="btn btn-success">Register</button>
     </form>
-{% endblock %}
\ No newline at end of file
+{% endblock %}
Index: user/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass BaseModel(models.Model):\n    objects = models.Manager()\n\n    class Meta:\n        abstract = True\n\n\nclass Profile(BaseModel):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    avatar = models.ImageField(default='default.jpg', upload_to='profile_images')\n\n\nclass BodyMeasurements(BaseModel):\n    bust = models.FloatField(verbose_name='Bust', max_length=10)\n    waist = models.FloatField(verbose_name='Waist', max_length=10)\n    hips = models.FloatField(verbose_name='Hips', max_length=10)\n    neck = models.FloatField(verbose_name='Neck', max_length=10)\n    chest = models.FloatField(verbose_name='Chest', max_length=10)\n    shoulder = models.FloatField(verbose_name='Shoulder', max_length=10)\n    sleeve = models.FloatField(verbose_name='Sleeve', max_length=10)\n    shoulder_to_waist = models.FloatField(verbose_name='Shoulder to waist', max_length=10)\n    shoulder_to_floor = models.FloatField(verbose_name='Shoulder to floor', max_length=10)\n    comment = models.TextField(verbose_name=\"Additional information\", max_length='250', blank=True)\n    last_updated = models.DateTimeField(auto_now_add=True)\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/models.py b/user/models.py
--- a/user/models.py	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/user/models.py	(date 1682538414761)
@@ -1,5 +1,6 @@
 from django.db import models
 from django.contrib.auth.models import User
+from PIL import Image
 
 
 class BaseModel(models.Model):
@@ -13,6 +14,17 @@
     user = models.OneToOneField(User, on_delete=models.CASCADE)
     avatar = models.ImageField(default='default.jpg', upload_to='profile_images')
 
+    def __str__(self):
+        return f"{self.user.username} Profile"
+
+    def save(self, *args, **kwargs):
+        super().save(*args, **kwargs)
+        img = Image.open(self.avatar.path)
+        if img.height > 150 or img.width > 150:
+            output_size = (150, 150)
+            img.thumbnail(output_size)
+            img.save(self.avatar.path)
+
 
 class BodyMeasurements(BaseModel):
     bust = models.FloatField(verbose_name='Bust', max_length=10)
@@ -24,7 +36,5 @@
     sleeve = models.FloatField(verbose_name='Sleeve', max_length=10)
     shoulder_to_waist = models.FloatField(verbose_name='Shoulder to waist', max_length=10)
     shoulder_to_floor = models.FloatField(verbose_name='Shoulder to floor', max_length=10)
-    comment = models.TextField(verbose_name="Additional information", max_length='250', blank=True)
+    comment = models.TextField(verbose_name="Additional information", max_length=250, blank=True)
     last_updated = models.DateTimeField(auto_now_add=True)
-
-
Index: user/signals.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db.models.signals import post_save\nfrom django.contrib.auth.models import User\nfrom django.dispatch import receiver\n\nfrom .models import Profile\n\n\n@receiver(post_save, sender=User)\ndef create_profile(sender, instance, created, **kwargs):\n    if created:\n        Profile.objects.create(user=instance)\n\n\n@receiver(post_save, sender=User)\ndef save_profile(sender, instance, **kwargs):\n    instance.profile.save()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/signals.py b/user/signals.py
--- a/user/signals.py	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/user/signals.py	(date 1682538815234)
@@ -1,7 +1,6 @@
 from django.db.models.signals import post_save
 from django.contrib.auth.models import User
 from django.dispatch import receiver
-
 from .models import Profile
 
 
Index: user/templates/users/profile.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\n\n{% block content %}      \n\n\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/templates/users/profile.html b/user/templates/users/profile.html
--- a/user/templates/users/profile.html	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/user/templates/users/profile.html	(date 1682539953243)
@@ -1,6 +1,40 @@
 {% extends "base.html" %}
 
-{% block content %}      
+	{% block content %}
 
+	{% load crispy_forms_tags %}
+
+	<!--User-->
+	<br><br>
+	<div class="container mx-auto">
+	    ...
+	</div>
+
+	<!--Edit user modal-->
+	<div class="modal fade" tabindex="-1" id="profileModal" role="dialog">
+	  	<div class="modal-dialog" role="document">
+		    <div class="modal-content">
+		      	<div class="modal-header">
+			        <h5 class="modal-title">Edit Profile</h5>
+			        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
+			          <span aria-hidden="true">&times;</span>
+			        </button>
+		        </div>
+		        <div class="modal-body">
+                  <form method="post">
+                    {% csrf_token %}
+                    {{ form|crispy }}
+                  </form>
+                  <form method="post">
+		      	<div class="modal-footer">
+		        		<button type="submit" class="btn btn-primary">Save changes</button> </div>
+		        	</form>
+
+		        	<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
+		        </div>
+		    </div>
+	  	</div>
+	</div>
+
 
-{% endblock %}
\ No newline at end of file
+	{% endblock %}
\ No newline at end of file
Index: user/templates/users/login.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\n\n{% block content %}      \n\n{% load crispy_forms_tags %}\n\n<!--Login--> \n<div class=\"container py-5\">\n  <h1>Login</h1>\n  <form method=\"POST\">\n    {% csrf_token %}\n    {{ login_form|crispy }}\n    <button class=\"btn btn-primary\" type=\"submit\">Login</button>\n  </form>\n  <p class=\"text-center\">Don't have an account? <a href=\"/register\">Create an account</a>.</p>\n  <p class=\"text-center\">Forgot your password? <a href=\"{% url 'password_reset' %}\">Reset Password</a>.</p>\n</div>\n\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/templates/users/login.html b/user/templates/users/login.html
--- a/user/templates/users/login.html	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/user/templates/users/login.html	(date 1682527234732)
@@ -8,8 +8,8 @@
 <div class="container py-5">
   <h1>Login</h1>
   <form method="POST">
-    {% csrf_token %}
     {{ login_form|crispy }}
+    {% csrf_token %}
     <button class="btn btn-primary" type="submit">Login</button>
   </form>
   <p class="text-center">Don't have an account? <a href="/register">Create an account</a>.</p>
Index: eShop/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nURL configuration for eShop project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/4.2/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom user import views as user_views\nfrom store import views as store_views\n\n\n\nurlpatterns = [\n    path('', store_views.index, name='home'),\n    path('accounts/', include('django.contrib.auth.urls')),\n    path('admin/', admin.site.urls),\n    path(\"register/\", user_views.register, name=\"register\"),\n    path(\"login\", user_views.login_request, name=\"login\"),\n    path(\"logout\", user_views.logout_request, name=\"logout\"),\n]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/eShop/urls.py b/eShop/urls.py
--- a/eShop/urls.py	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/eShop/urls.py	(date 1682531370196)
@@ -18,7 +18,8 @@
 from django.urls import path, include
 from user import views as user_views
 from store import views as store_views
-
+from django.conf import settings
+from django.conf.urls.static import static
 
 
 urlpatterns = [
@@ -28,4 +29,9 @@
     path("register/", user_views.register, name="register"),
     path("login", user_views.login_request, name="login"),
     path("logout", user_views.logout_request, name="logout"),
+    path('profile', user_views.profile, name='profile'),
 ]
+
+if settings.DEBUG:
+    urlpatterns += static(settings.MEDIA_URL,
+                          document_root=settings.MEDIA_ROOT)
\ No newline at end of file
Index: user/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\nfrom .models import Profile\n\nadmin.site.register(Profile)\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/user/admin.py b/user/admin.py
--- a/user/admin.py	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/user/admin.py	(date 1682530857603)
@@ -1,7 +1,8 @@
-from django.contrib import admin
 from .models import Profile
+from django.contrib import admin
 
 admin.site.register(Profile)
 
 
 
+
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>asgiref==3.6.0\r\nbootstrap4==0.1.0\r\ncrispy-bootstrap4==2022.1\r\nDjango==4.2\r\ndjango-crispy-forms==2.0\r\nsqlparse==0.4.4\r\ntzdata==2023.3\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-16LE
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision 9120fc1b4a268ca8ad8893d9392386255f88ce3a)
+++ b/requirements.txt	(date 1682527964865)
@@ -5,3 +5,5 @@
 django-crispy-forms==2.0
 sqlparse==0.4.4
 tzdata==2023.3
+
+Pillow~=9.5.0
\ No newline at end of file
